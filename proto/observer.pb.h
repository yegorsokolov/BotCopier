// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: observer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_observer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_observer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "trade_event.pb.h"
#include "metrics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_observer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_observer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_observer_2eproto;
namespace tbot {
class ObserverMessage;
struct ObserverMessageDefaultTypeInternal;
extern ObserverMessageDefaultTypeInternal _ObserverMessage_default_instance_;
}  // namespace tbot
PROTOBUF_NAMESPACE_OPEN
template<> ::tbot::ObserverMessage* Arena::CreateMaybeMessage<::tbot::ObserverMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tbot {

// ===================================================================

class ObserverMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tbot.ObserverMessage) */ {
 public:
  inline ObserverMessage() : ObserverMessage(nullptr) {}
  ~ObserverMessage() override;
  explicit PROTOBUF_CONSTEXPR ObserverMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObserverMessage(const ObserverMessage& from);
  ObserverMessage(ObserverMessage&& from) noexcept
    : ObserverMessage() {
    *this = ::std::move(from);
  }

  inline ObserverMessage& operator=(const ObserverMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserverMessage& operator=(ObserverMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObserverMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kEvent = 2,
    kMetric = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const ObserverMessage* internal_default_instance() {
    return reinterpret_cast<const ObserverMessage*>(
               &_ObserverMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObserverMessage& a, ObserverMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserverMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserverMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObserverMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObserverMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObserverMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObserverMessage& from) {
    ObserverMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserverMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tbot.ObserverMessage";
  }
  protected:
  explicit ObserverMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaVersionFieldNumber = 1,
    kEventFieldNumber = 2,
    kMetricFieldNumber = 3,
  };
  // string schema_version = 1;
  void clear_schema_version();
  const std::string& schema_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema_version();
  PROTOBUF_NODISCARD std::string* release_schema_version();
  void set_allocated_schema_version(std::string* schema_version);
  private:
  const std::string& _internal_schema_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_version(const std::string& value);
  std::string* _internal_mutable_schema_version();
  public:

  // .tbot.TradeEvent event = 2;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::tbot::TradeEvent& event() const;
  PROTOBUF_NODISCARD ::tbot::TradeEvent* release_event();
  ::tbot::TradeEvent* mutable_event();
  void set_allocated_event(::tbot::TradeEvent* event);
  private:
  const ::tbot::TradeEvent& _internal_event() const;
  ::tbot::TradeEvent* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::tbot::TradeEvent* event);
  ::tbot::TradeEvent* unsafe_arena_release_event();

  // .tbot.Metrics metric = 3;
  bool has_metric() const;
  private:
  bool _internal_has_metric() const;
  public:
  void clear_metric();
  const ::tbot::Metrics& metric() const;
  PROTOBUF_NODISCARD ::tbot::Metrics* release_metric();
  ::tbot::Metrics* mutable_metric();
  void set_allocated_metric(::tbot::Metrics* metric);
  private:
  const ::tbot::Metrics& _internal_metric() const;
  ::tbot::Metrics* _internal_mutable_metric();
  public:
  void unsafe_arena_set_allocated_metric(
      ::tbot::Metrics* metric);
  ::tbot::Metrics* unsafe_arena_release_metric();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:tbot.ObserverMessage)
 private:
  class _Internal;
  void set_has_event();
  void set_has_metric();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_version_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tbot::TradeEvent* event_;
      ::tbot::Metrics* metric_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_observer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObserverMessage

// string schema_version = 1;
inline void ObserverMessage::clear_schema_version() {
  _impl_.schema_version_.ClearToEmpty();
}
inline const std::string& ObserverMessage::schema_version() const {
  // @@protoc_insertion_point(field_get:tbot.ObserverMessage.schema_version)
  return _internal_schema_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObserverMessage::set_schema_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.ObserverMessage.schema_version)
}
inline std::string* ObserverMessage::mutable_schema_version() {
  std::string* _s = _internal_mutable_schema_version();
  // @@protoc_insertion_point(field_mutable:tbot.ObserverMessage.schema_version)
  return _s;
}
inline const std::string& ObserverMessage::_internal_schema_version() const {
  return _impl_.schema_version_.Get();
}
inline void ObserverMessage::_internal_set_schema_version(const std::string& value) {
  
  _impl_.schema_version_.Set(value, GetArenaForAllocation());
}
inline std::string* ObserverMessage::_internal_mutable_schema_version() {
  
  return _impl_.schema_version_.Mutable(GetArenaForAllocation());
}
inline std::string* ObserverMessage::release_schema_version() {
  // @@protoc_insertion_point(field_release:tbot.ObserverMessage.schema_version)
  return _impl_.schema_version_.Release();
}
inline void ObserverMessage::set_allocated_schema_version(std::string* schema_version) {
  if (schema_version != nullptr) {
    
  } else {
    
  }
  _impl_.schema_version_.SetAllocated(schema_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_version_.IsDefault()) {
    _impl_.schema_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.ObserverMessage.schema_version)
}

// .tbot.TradeEvent event = 2;
inline bool ObserverMessage::_internal_has_event() const {
  return payload_case() == kEvent;
}
inline bool ObserverMessage::has_event() const {
  return _internal_has_event();
}
inline void ObserverMessage::set_has_event() {
  _impl_._oneof_case_[0] = kEvent;
}
inline ::tbot::TradeEvent* ObserverMessage::release_event() {
  // @@protoc_insertion_point(field_release:tbot.ObserverMessage.event)
  if (_internal_has_event()) {
    clear_has_payload();
    ::tbot::TradeEvent* temp = _impl_.payload_.event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tbot::TradeEvent& ObserverMessage::_internal_event() const {
  return _internal_has_event()
      ? *_impl_.payload_.event_
      : reinterpret_cast< ::tbot::TradeEvent&>(::tbot::_TradeEvent_default_instance_);
}
inline const ::tbot::TradeEvent& ObserverMessage::event() const {
  // @@protoc_insertion_point(field_get:tbot.ObserverMessage.event)
  return _internal_event();
}
inline ::tbot::TradeEvent* ObserverMessage::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tbot.ObserverMessage.event)
  if (_internal_has_event()) {
    clear_has_payload();
    ::tbot::TradeEvent* temp = _impl_.payload_.event_;
    _impl_.payload_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObserverMessage::unsafe_arena_set_allocated_event(::tbot::TradeEvent* event) {
  clear_payload();
  if (event) {
    set_has_event();
    _impl_.payload_.event_ = event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tbot.ObserverMessage.event)
}
inline ::tbot::TradeEvent* ObserverMessage::_internal_mutable_event() {
  if (!_internal_has_event()) {
    clear_payload();
    set_has_event();
    _impl_.payload_.event_ = CreateMaybeMessage< ::tbot::TradeEvent >(GetArenaForAllocation());
  }
  return _impl_.payload_.event_;
}
inline ::tbot::TradeEvent* ObserverMessage::mutable_event() {
  ::tbot::TradeEvent* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:tbot.ObserverMessage.event)
  return _msg;
}

// .tbot.Metrics metric = 3;
inline bool ObserverMessage::_internal_has_metric() const {
  return payload_case() == kMetric;
}
inline bool ObserverMessage::has_metric() const {
  return _internal_has_metric();
}
inline void ObserverMessage::set_has_metric() {
  _impl_._oneof_case_[0] = kMetric;
}
inline ::tbot::Metrics* ObserverMessage::release_metric() {
  // @@protoc_insertion_point(field_release:tbot.ObserverMessage.metric)
  if (_internal_has_metric()) {
    clear_has_payload();
    ::tbot::Metrics* temp = _impl_.payload_.metric_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.metric_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tbot::Metrics& ObserverMessage::_internal_metric() const {
  return _internal_has_metric()
      ? *_impl_.payload_.metric_
      : reinterpret_cast< ::tbot::Metrics&>(::tbot::_Metrics_default_instance_);
}
inline const ::tbot::Metrics& ObserverMessage::metric() const {
  // @@protoc_insertion_point(field_get:tbot.ObserverMessage.metric)
  return _internal_metric();
}
inline ::tbot::Metrics* ObserverMessage::unsafe_arena_release_metric() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tbot.ObserverMessage.metric)
  if (_internal_has_metric()) {
    clear_has_payload();
    ::tbot::Metrics* temp = _impl_.payload_.metric_;
    _impl_.payload_.metric_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObserverMessage::unsafe_arena_set_allocated_metric(::tbot::Metrics* metric) {
  clear_payload();
  if (metric) {
    set_has_metric();
    _impl_.payload_.metric_ = metric;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tbot.ObserverMessage.metric)
}
inline ::tbot::Metrics* ObserverMessage::_internal_mutable_metric() {
  if (!_internal_has_metric()) {
    clear_payload();
    set_has_metric();
    _impl_.payload_.metric_ = CreateMaybeMessage< ::tbot::Metrics >(GetArenaForAllocation());
  }
  return _impl_.payload_.metric_;
}
inline ::tbot::Metrics* ObserverMessage::mutable_metric() {
  ::tbot::Metrics* _msg = _internal_mutable_metric();
  // @@protoc_insertion_point(field_mutable:tbot.ObserverMessage.metric)
  return _msg;
}

inline bool ObserverMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void ObserverMessage::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline ObserverMessage::PayloadCase ObserverMessage::payload_case() const {
  return ObserverMessage::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tbot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_observer_2eproto
