// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metric_event.proto

#include "metric_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tbot {
PROTOBUF_CONSTEXPR MetricEvent::MetricEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.win_rate_)*/0
  , /*decltype(_impl_.magic_)*/0
  , /*decltype(_impl_.trade_count_)*/0
  , /*decltype(_impl_.avg_profit_)*/0
  , /*decltype(_impl_.drawdown_)*/0
  , /*decltype(_impl_.sharpe_)*/0
  , /*decltype(_impl_.file_write_errors_)*/0
  , /*decltype(_impl_.socket_errors_)*/0
  , /*decltype(_impl_.book_refresh_seconds_)*/0
  , /*decltype(_impl_.var_breach_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricEventDefaultTypeInternal() {}
  union {
    MetricEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricEventDefaultTypeInternal _MetricEvent_default_instance_;
}  // namespace tbot
static ::_pb::Metadata file_level_metadata_metric_5fevent_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_metric_5fevent_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_metric_5fevent_2eproto = nullptr;

const uint32_t TableStruct_metric_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _impl_.magic_),
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _impl_.win_rate_),
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _impl_.avg_profit_),
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _impl_.trade_count_),
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _impl_.drawdown_),
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _impl_.sharpe_),
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _impl_.file_write_errors_),
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _impl_.socket_errors_),
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _impl_.book_refresh_seconds_),
  PROTOBUF_FIELD_OFFSET(::tbot::MetricEvent, _impl_.var_breach_count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tbot::MetricEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tbot::_MetricEvent_default_instance_._instance,
};

const char descriptor_table_protodef_metric_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022metric_event.proto\022\004tbot\"\361\001\n\013MetricEve"
  "nt\022\014\n\004time\030\001 \001(\t\022\r\n\005magic\030\002 \001(\005\022\020\n\010win_r"
  "ate\030\003 \001(\001\022\022\n\navg_profit\030\004 \001(\001\022\023\n\013trade_c"
  "ount\030\005 \001(\005\022\020\n\010drawdown\030\006 \001(\001\022\016\n\006sharpe\030\007"
  " \001(\001\022\031\n\021file_write_errors\030\010 \001(\005\022\025\n\rsocke"
  "t_errors\030\t \001(\005\022\034\n\024book_refresh_seconds\030\n"
  " \001(\005\022\030\n\020var_breach_count\030\013 \001(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_metric_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_metric_5fevent_2eproto = {
    false, false, 278, descriptor_table_protodef_metric_5fevent_2eproto,
    "metric_event.proto",
    &descriptor_table_metric_5fevent_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_metric_5fevent_2eproto::offsets,
    file_level_metadata_metric_5fevent_2eproto, file_level_enum_descriptors_metric_5fevent_2eproto,
    file_level_service_descriptors_metric_5fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_metric_5fevent_2eproto_getter() {
  return &descriptor_table_metric_5fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_metric_5fevent_2eproto(&descriptor_table_metric_5fevent_2eproto);
namespace tbot {

// ===================================================================

class MetricEvent::_Internal {
 public:
};

MetricEvent::MetricEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tbot.MetricEvent)
}
MetricEvent::MetricEvent(const MetricEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.win_rate_){}
    , decltype(_impl_.magic_){}
    , decltype(_impl_.trade_count_){}
    , decltype(_impl_.avg_profit_){}
    , decltype(_impl_.drawdown_){}
    , decltype(_impl_.sharpe_){}
    , decltype(_impl_.file_write_errors_){}
    , decltype(_impl_.socket_errors_){}
    , decltype(_impl_.book_refresh_seconds_){}
    , decltype(_impl_.var_breach_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time().empty()) {
    _this->_impl_.time_.Set(from._internal_time(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.win_rate_, &from._impl_.win_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_breach_count_) -
    reinterpret_cast<char*>(&_impl_.win_rate_)) + sizeof(_impl_.var_breach_count_));
  // @@protoc_insertion_point(copy_constructor:tbot.MetricEvent)
}

inline void MetricEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.win_rate_){0}
    , decltype(_impl_.magic_){0}
    , decltype(_impl_.trade_count_){0}
    , decltype(_impl_.avg_profit_){0}
    , decltype(_impl_.drawdown_){0}
    , decltype(_impl_.sharpe_){0}
    , decltype(_impl_.file_write_errors_){0}
    , decltype(_impl_.socket_errors_){0}
    , decltype(_impl_.book_refresh_seconds_){0}
    , decltype(_impl_.var_breach_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetricEvent::~MetricEvent() {
  // @@protoc_insertion_point(destructor:tbot.MetricEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.time_.Destroy();
}

void MetricEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tbot.MetricEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_.ClearToEmpty();
  ::memset(&_impl_.win_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_breach_count_) -
      reinterpret_cast<char*>(&_impl_.win_rate_)) + sizeof(_impl_.var_breach_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.MetricEvent.time"));
        } else
          goto handle_unusual;
        continue;
      // int32 magic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double win_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.win_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double avg_profit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.avg_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 trade_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.trade_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double drawdown = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.drawdown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sharpe = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.sharpe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 file_write_errors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.file_write_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 socket_errors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.socket_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 book_refresh_seconds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.book_refresh_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_breach_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.var_breach_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbot.MetricEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (!this->_internal_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.MetricEvent.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  // int32 magic = 2;
  if (this->_internal_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_magic(), target);
  }

  // double win_rate = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_win_rate = this->_internal_win_rate();
  uint64_t raw_win_rate;
  memcpy(&raw_win_rate, &tmp_win_rate, sizeof(tmp_win_rate));
  if (raw_win_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_win_rate(), target);
  }

  // double avg_profit = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_profit = this->_internal_avg_profit();
  uint64_t raw_avg_profit;
  memcpy(&raw_avg_profit, &tmp_avg_profit, sizeof(tmp_avg_profit));
  if (raw_avg_profit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_avg_profit(), target);
  }

  // int32 trade_count = 5;
  if (this->_internal_trade_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_trade_count(), target);
  }

  // double drawdown = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drawdown = this->_internal_drawdown();
  uint64_t raw_drawdown;
  memcpy(&raw_drawdown, &tmp_drawdown, sizeof(tmp_drawdown));
  if (raw_drawdown != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_drawdown(), target);
  }

  // double sharpe = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sharpe = this->_internal_sharpe();
  uint64_t raw_sharpe;
  memcpy(&raw_sharpe, &tmp_sharpe, sizeof(tmp_sharpe));
  if (raw_sharpe != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_sharpe(), target);
  }

  // int32 file_write_errors = 8;
  if (this->_internal_file_write_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_file_write_errors(), target);
  }

  // int32 socket_errors = 9;
  if (this->_internal_socket_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_socket_errors(), target);
  }

  // int32 book_refresh_seconds = 10;
  if (this->_internal_book_refresh_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_book_refresh_seconds(), target);
  }

  // int32 var_breach_count = 11;
  if (this->_internal_var_breach_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_var_breach_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbot.MetricEvent)
  return target;
}

size_t MetricEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbot.MetricEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 1;
  if (!this->_internal_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // double win_rate = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_win_rate = this->_internal_win_rate();
  uint64_t raw_win_rate;
  memcpy(&raw_win_rate, &tmp_win_rate, sizeof(tmp_win_rate));
  if (raw_win_rate != 0) {
    total_size += 1 + 8;
  }

  // int32 magic = 2;
  if (this->_internal_magic() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_magic());
  }

  // int32 trade_count = 5;
  if (this->_internal_trade_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trade_count());
  }

  // double avg_profit = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_profit = this->_internal_avg_profit();
  uint64_t raw_avg_profit;
  memcpy(&raw_avg_profit, &tmp_avg_profit, sizeof(tmp_avg_profit));
  if (raw_avg_profit != 0) {
    total_size += 1 + 8;
  }

  // double drawdown = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drawdown = this->_internal_drawdown();
  uint64_t raw_drawdown;
  memcpy(&raw_drawdown, &tmp_drawdown, sizeof(tmp_drawdown));
  if (raw_drawdown != 0) {
    total_size += 1 + 8;
  }

  // double sharpe = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sharpe = this->_internal_sharpe();
  uint64_t raw_sharpe;
  memcpy(&raw_sharpe, &tmp_sharpe, sizeof(tmp_sharpe));
  if (raw_sharpe != 0) {
    total_size += 1 + 8;
  }

  // int32 file_write_errors = 8;
  if (this->_internal_file_write_errors() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_file_write_errors());
  }

  // int32 socket_errors = 9;
  if (this->_internal_socket_errors() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_socket_errors());
  }

  // int32 book_refresh_seconds = 10;
  if (this->_internal_book_refresh_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_book_refresh_seconds());
  }

  // int32 var_breach_count = 11;
  if (this->_internal_var_breach_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_breach_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricEvent::GetClassData() const { return &_class_data_; }


void MetricEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricEvent*>(&to_msg);
  auto& from = static_cast<const MetricEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tbot.MetricEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_win_rate = from._internal_win_rate();
  uint64_t raw_win_rate;
  memcpy(&raw_win_rate, &tmp_win_rate, sizeof(tmp_win_rate));
  if (raw_win_rate != 0) {
    _this->_internal_set_win_rate(from._internal_win_rate());
  }
  if (from._internal_magic() != 0) {
    _this->_internal_set_magic(from._internal_magic());
  }
  if (from._internal_trade_count() != 0) {
    _this->_internal_set_trade_count(from._internal_trade_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_profit = from._internal_avg_profit();
  uint64_t raw_avg_profit;
  memcpy(&raw_avg_profit, &tmp_avg_profit, sizeof(tmp_avg_profit));
  if (raw_avg_profit != 0) {
    _this->_internal_set_avg_profit(from._internal_avg_profit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drawdown = from._internal_drawdown();
  uint64_t raw_drawdown;
  memcpy(&raw_drawdown, &tmp_drawdown, sizeof(tmp_drawdown));
  if (raw_drawdown != 0) {
    _this->_internal_set_drawdown(from._internal_drawdown());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sharpe = from._internal_sharpe();
  uint64_t raw_sharpe;
  memcpy(&raw_sharpe, &tmp_sharpe, sizeof(tmp_sharpe));
  if (raw_sharpe != 0) {
    _this->_internal_set_sharpe(from._internal_sharpe());
  }
  if (from._internal_file_write_errors() != 0) {
    _this->_internal_set_file_write_errors(from._internal_file_write_errors());
  }
  if (from._internal_socket_errors() != 0) {
    _this->_internal_set_socket_errors(from._internal_socket_errors());
  }
  if (from._internal_book_refresh_seconds() != 0) {
    _this->_internal_set_book_refresh_seconds(from._internal_book_refresh_seconds());
  }
  if (from._internal_var_breach_count() != 0) {
    _this->_internal_set_var_breach_count(from._internal_var_breach_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricEvent::CopyFrom(const MetricEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbot.MetricEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricEvent::IsInitialized() const {
  return true;
}

void MetricEvent::InternalSwap(MetricEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_, lhs_arena,
      &other->_impl_.time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricEvent, _impl_.var_breach_count_)
      + sizeof(MetricEvent::_impl_.var_breach_count_)
      - PROTOBUF_FIELD_OFFSET(MetricEvent, _impl_.win_rate_)>(
          reinterpret_cast<char*>(&_impl_.win_rate_),
          reinterpret_cast<char*>(&other->_impl_.win_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metric_5fevent_2eproto_getter, &descriptor_table_metric_5fevent_2eproto_once,
      file_level_metadata_metric_5fevent_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tbot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tbot::MetricEvent*
Arena::CreateMaybeMessage< ::tbot::MetricEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbot::MetricEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
