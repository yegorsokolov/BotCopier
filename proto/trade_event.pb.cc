// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_event.proto

#include "trade_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tbot {
PROTOBUF_CONSTEXPR TradeEvent::TradeEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.broker_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.span_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.ticket_)*/0
  , /*decltype(_impl_.magic_)*/0
  , /*decltype(_impl_.order_type_)*/0
  , /*decltype(_impl_.lots_)*/0
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.sl_)*/0
  , /*decltype(_impl_.tp_)*/0
  , /*decltype(_impl_.profit_)*/0
  , /*decltype(_impl_.profit_after_trade_)*/0
  , /*decltype(_impl_.spread_)*/0
  , /*decltype(_impl_.remaining_lots_)*/0
  , /*decltype(_impl_.slippage_)*/0
  , /*decltype(_impl_.book_bid_vol_)*/0
  , /*decltype(_impl_.book_ask_vol_)*/0
  , /*decltype(_impl_.volume_)*/0
  , /*decltype(_impl_.decision_id_)*/0
  , /*decltype(_impl_.book_imbalance_)*/0
  , /*decltype(_impl_.sl_hit_dist_)*/0
  , /*decltype(_impl_.tp_hit_dist_)*/0
  , /*decltype(_impl_.equity_)*/0
  , /*decltype(_impl_.margin_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradeEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeEventDefaultTypeInternal() {}
  union {
    TradeEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeEventDefaultTypeInternal _TradeEvent_default_instance_;
}  // namespace tbot
static ::_pb::Metadata file_level_metadata_trade_5fevent_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_trade_5fevent_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_trade_5fevent_2eproto = nullptr;

const uint32_t TableStruct_trade_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.event_time_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.broker_time_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.local_time_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.ticket_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.magic_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.order_type_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.lots_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.sl_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.tp_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.profit_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.profit_after_trade_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.spread_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.remaining_lots_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.slippage_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.open_time_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.book_bid_vol_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.book_ask_vol_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.book_imbalance_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.sl_hit_dist_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.tp_hit_dist_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.decision_id_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.equity_),
  PROTOBUF_FIELD_OFFSET(::tbot::TradeEvent, _impl_.margin_level_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tbot::TradeEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tbot::_TradeEvent_default_instance_._instance,
};

const char descriptor_table_protodef_trade_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021trade_event.proto\022\004tbot\"\331\004\n\nTradeEvent"
  "\022\020\n\010event_id\030\001 \001(\005\022\022\n\nevent_time\030\002 \001(\t\022\023"
  "\n\013broker_time\030\003 \001(\t\022\022\n\nlocal_time\030\004 \001(\t\022"
  "\016\n\006action\030\005 \001(\t\022\016\n\006ticket\030\006 \001(\005\022\r\n\005magic"
  "\030\007 \001(\005\022\016\n\006source\030\010 \001(\t\022\016\n\006symbol\030\t \001(\t\022\022"
  "\n\norder_type\030\n \001(\005\022\014\n\004lots\030\013 \001(\001\022\r\n\005pric"
  "e\030\014 \001(\001\022\n\n\002sl\030\r \001(\001\022\n\n\002tp\030\016 \001(\001\022\016\n\006profi"
  "t\030\017 \001(\001\022\032\n\022profit_after_trade\030\020 \001(\001\022\016\n\006s"
  "pread\030\021 \001(\001\022\017\n\007comment\030\022 \001(\t\022\026\n\016remainin"
  "g_lots\030\023 \001(\001\022\020\n\010slippage\030\024 \001(\001\022\016\n\006volume"
  "\030\025 \001(\005\022\021\n\topen_time\030\026 \001(\t\022\024\n\014book_bid_vo"
  "l\030\027 \001(\001\022\024\n\014book_ask_vol\030\030 \001(\001\022\026\n\016book_im"
  "balance\030\031 \001(\001\022\023\n\013sl_hit_dist\030\032 \001(\001\022\023\n\013tp"
  "_hit_dist\030\033 \001(\001\022\023\n\013decision_id\030\034 \001(\005\022\020\n\010"
  "trace_id\030\035 \001(\t\022\017\n\007span_id\030\036 \001(\t\022\016\n\006equit"
  "y\030\037 \001(\001\022\024\n\014margin_level\030  \001(\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_trade_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_trade_5fevent_2eproto = {
    false, false, 637, descriptor_table_protodef_trade_5fevent_2eproto,
    "trade_event.proto",
    &descriptor_table_trade_5fevent_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_trade_5fevent_2eproto::offsets,
    file_level_metadata_trade_5fevent_2eproto, file_level_enum_descriptors_trade_5fevent_2eproto,
    file_level_service_descriptors_trade_5fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_trade_5fevent_2eproto_getter() {
  return &descriptor_table_trade_5fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_trade_5fevent_2eproto(&descriptor_table_trade_5fevent_2eproto);
namespace tbot {

// ===================================================================

class TradeEvent::_Internal {
 public:
};

TradeEvent::TradeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tbot.TradeEvent)
}
TradeEvent::TradeEvent(const TradeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradeEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_time_){}
    , decltype(_impl_.broker_time_){}
    , decltype(_impl_.local_time_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.open_time_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.ticket_){}
    , decltype(_impl_.magic_){}
    , decltype(_impl_.order_type_){}
    , decltype(_impl_.lots_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.sl_){}
    , decltype(_impl_.tp_){}
    , decltype(_impl_.profit_){}
    , decltype(_impl_.profit_after_trade_){}
    , decltype(_impl_.spread_){}
    , decltype(_impl_.remaining_lots_){}
    , decltype(_impl_.slippage_){}
    , decltype(_impl_.book_bid_vol_){}
    , decltype(_impl_.book_ask_vol_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.decision_id_){}
    , decltype(_impl_.book_imbalance_){}
    , decltype(_impl_.sl_hit_dist_){}
    , decltype(_impl_.tp_hit_dist_){}
    , decltype(_impl_.equity_){}
    , decltype(_impl_.margin_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_time().empty()) {
    _this->_impl_.event_time_.Set(from._internal_event_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.broker_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broker_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_broker_time().empty()) {
    _this->_impl_.broker_time_.Set(from._internal_broker_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.local_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_time().empty()) {
    _this->_impl_.local_time_.Set(from._internal_local_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source().empty()) {
    _this->_impl_.source_.Set(from._internal_source(), 
      _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_time().empty()) {
    _this->_impl_.open_time_.Set(from._internal_open_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_id().empty()) {
    _this->_impl_.trace_id_.Set(from._internal_trace_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_span_id().empty()) {
    _this->_impl_.span_id_.Set(from._internal_span_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.margin_level_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.margin_level_));
  // @@protoc_insertion_point(copy_constructor:tbot.TradeEvent)
}

inline void TradeEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_time_){}
    , decltype(_impl_.broker_time_){}
    , decltype(_impl_.local_time_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.open_time_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.ticket_){0}
    , decltype(_impl_.magic_){0}
    , decltype(_impl_.order_type_){0}
    , decltype(_impl_.lots_){0}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.sl_){0}
    , decltype(_impl_.tp_){0}
    , decltype(_impl_.profit_){0}
    , decltype(_impl_.profit_after_trade_){0}
    , decltype(_impl_.spread_){0}
    , decltype(_impl_.remaining_lots_){0}
    , decltype(_impl_.slippage_){0}
    , decltype(_impl_.book_bid_vol_){0}
    , decltype(_impl_.book_ask_vol_){0}
    , decltype(_impl_.volume_){0}
    , decltype(_impl_.decision_id_){0}
    , decltype(_impl_.book_imbalance_){0}
    , decltype(_impl_.sl_hit_dist_){0}
    , decltype(_impl_.tp_hit_dist_){0}
    , decltype(_impl_.equity_){0}
    , decltype(_impl_.margin_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broker_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broker_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.local_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradeEvent::~TradeEvent() {
  // @@protoc_insertion_point(destructor:tbot.TradeEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_time_.Destroy();
  _impl_.broker_time_.Destroy();
  _impl_.local_time_.Destroy();
  _impl_.action_.Destroy();
  _impl_.source_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.comment_.Destroy();
  _impl_.open_time_.Destroy();
  _impl_.trace_id_.Destroy();
  _impl_.span_id_.Destroy();
}

void TradeEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tbot.TradeEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_time_.ClearToEmpty();
  _impl_.broker_time_.ClearToEmpty();
  _impl_.local_time_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  _impl_.source_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.comment_.ClearToEmpty();
  _impl_.open_time_.ClearToEmpty();
  _impl_.trace_id_.ClearToEmpty();
  _impl_.span_id_.ClearToEmpty();
  ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.margin_level_) -
      reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.margin_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string event_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_event_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.TradeEvent.event_time"));
        } else
          goto handle_unusual;
        continue;
      // string broker_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_broker_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.TradeEvent.broker_time"));
        } else
          goto handle_unusual;
        continue;
      // string local_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_local_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.TradeEvent.local_time"));
        } else
          goto handle_unusual;
        continue;
      // string action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.TradeEvent.action"));
        } else
          goto handle_unusual;
        continue;
      // int32 ticket = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 magic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.TradeEvent.source"));
        } else
          goto handle_unusual;
        continue;
      // string symbol = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.TradeEvent.symbol"));
        } else
          goto handle_unusual;
        continue;
      // int32 order_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.order_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double lots = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.lots_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double price = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sl = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.sl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double tp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.tp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double profit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double profit_after_trade = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.profit_after_trade_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double spread = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _impl_.spread_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string comment = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.TradeEvent.comment"));
        } else
          goto handle_unusual;
        continue;
      // double remaining_lots = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _impl_.remaining_lots_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double slippage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _impl_.slippage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 volume = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string open_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_open_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.TradeEvent.open_time"));
        } else
          goto handle_unusual;
        continue;
      // double book_bid_vol = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.book_bid_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double book_ask_vol = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.book_ask_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double book_imbalance = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.book_imbalance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sl_hit_dist = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _impl_.sl_hit_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double tp_hit_dist = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.tp_hit_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 decision_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.decision_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trace_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.TradeEvent.trace_id"));
        } else
          goto handle_unusual;
        continue;
      // string span_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_span_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.TradeEvent.span_id"));
        } else
          goto handle_unusual;
        continue;
      // double equity = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _impl_.equity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double margin_level = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _impl_.margin_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradeEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbot.TradeEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 event_id = 1;
  if (this->_internal_event_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_id(), target);
  }

  // string event_time = 2;
  if (!this->_internal_event_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_time().data(), static_cast<int>(this->_internal_event_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.TradeEvent.event_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_time(), target);
  }

  // string broker_time = 3;
  if (!this->_internal_broker_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broker_time().data(), static_cast<int>(this->_internal_broker_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.TradeEvent.broker_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_broker_time(), target);
  }

  // string local_time = 4;
  if (!this->_internal_local_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_time().data(), static_cast<int>(this->_internal_local_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.TradeEvent.local_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_local_time(), target);
  }

  // string action = 5;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.TradeEvent.action");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action(), target);
  }

  // int32 ticket = 6;
  if (this->_internal_ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_ticket(), target);
  }

  // int32 magic = 7;
  if (this->_internal_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_magic(), target);
  }

  // string source = 8;
  if (!this->_internal_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.TradeEvent.source");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_source(), target);
  }

  // string symbol = 9;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.TradeEvent.symbol");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_symbol(), target);
  }

  // int32 order_type = 10;
  if (this->_internal_order_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_order_type(), target);
  }

  // double lots = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lots = this->_internal_lots();
  uint64_t raw_lots;
  memcpy(&raw_lots, &tmp_lots, sizeof(tmp_lots));
  if (raw_lots != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_lots(), target);
  }

  // double price = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_price(), target);
  }

  // double sl = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sl = this->_internal_sl();
  uint64_t raw_sl;
  memcpy(&raw_sl, &tmp_sl, sizeof(tmp_sl));
  if (raw_sl != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_sl(), target);
  }

  // double tp = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tp = this->_internal_tp();
  uint64_t raw_tp;
  memcpy(&raw_tp, &tmp_tp, sizeof(tmp_tp));
  if (raw_tp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_tp(), target);
  }

  // double profit = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_profit = this->_internal_profit();
  uint64_t raw_profit;
  memcpy(&raw_profit, &tmp_profit, sizeof(tmp_profit));
  if (raw_profit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_profit(), target);
  }

  // double profit_after_trade = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_profit_after_trade = this->_internal_profit_after_trade();
  uint64_t raw_profit_after_trade;
  memcpy(&raw_profit_after_trade, &tmp_profit_after_trade, sizeof(tmp_profit_after_trade));
  if (raw_profit_after_trade != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_profit_after_trade(), target);
  }

  // double spread = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_spread = this->_internal_spread();
  uint64_t raw_spread;
  memcpy(&raw_spread, &tmp_spread, sizeof(tmp_spread));
  if (raw_spread != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_spread(), target);
  }

  // string comment = 18;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.TradeEvent.comment");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_comment(), target);
  }

  // double remaining_lots = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_remaining_lots = this->_internal_remaining_lots();
  uint64_t raw_remaining_lots;
  memcpy(&raw_remaining_lots, &tmp_remaining_lots, sizeof(tmp_remaining_lots));
  if (raw_remaining_lots != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_remaining_lots(), target);
  }

  // double slippage = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_slippage = this->_internal_slippage();
  uint64_t raw_slippage;
  memcpy(&raw_slippage, &tmp_slippage, sizeof(tmp_slippage));
  if (raw_slippage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_slippage(), target);
  }

  // int32 volume = 21;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_volume(), target);
  }

  // string open_time = 22;
  if (!this->_internal_open_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_time().data(), static_cast<int>(this->_internal_open_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.TradeEvent.open_time");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_open_time(), target);
  }

  // double book_bid_vol = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_book_bid_vol = this->_internal_book_bid_vol();
  uint64_t raw_book_bid_vol;
  memcpy(&raw_book_bid_vol, &tmp_book_bid_vol, sizeof(tmp_book_bid_vol));
  if (raw_book_bid_vol != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_book_bid_vol(), target);
  }

  // double book_ask_vol = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_book_ask_vol = this->_internal_book_ask_vol();
  uint64_t raw_book_ask_vol;
  memcpy(&raw_book_ask_vol, &tmp_book_ask_vol, sizeof(tmp_book_ask_vol));
  if (raw_book_ask_vol != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_book_ask_vol(), target);
  }

  // double book_imbalance = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_book_imbalance = this->_internal_book_imbalance();
  uint64_t raw_book_imbalance;
  memcpy(&raw_book_imbalance, &tmp_book_imbalance, sizeof(tmp_book_imbalance));
  if (raw_book_imbalance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_book_imbalance(), target);
  }

  // double sl_hit_dist = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sl_hit_dist = this->_internal_sl_hit_dist();
  uint64_t raw_sl_hit_dist;
  memcpy(&raw_sl_hit_dist, &tmp_sl_hit_dist, sizeof(tmp_sl_hit_dist));
  if (raw_sl_hit_dist != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_sl_hit_dist(), target);
  }

  // double tp_hit_dist = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tp_hit_dist = this->_internal_tp_hit_dist();
  uint64_t raw_tp_hit_dist;
  memcpy(&raw_tp_hit_dist, &tmp_tp_hit_dist, sizeof(tmp_tp_hit_dist));
  if (raw_tp_hit_dist != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_tp_hit_dist(), target);
  }

  // int32 decision_id = 28;
  if (this->_internal_decision_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_decision_id(), target);
  }

  // string trace_id = 29;
  if (!this->_internal_trace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_id().data(), static_cast<int>(this->_internal_trace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.TradeEvent.trace_id");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_trace_id(), target);
  }

  // string span_id = 30;
  if (!this->_internal_span_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_span_id().data(), static_cast<int>(this->_internal_span_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.TradeEvent.span_id");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_span_id(), target);
  }

  // double equity = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_equity = this->_internal_equity();
  uint64_t raw_equity;
  memcpy(&raw_equity, &tmp_equity, sizeof(tmp_equity));
  if (raw_equity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_equity(), target);
  }

  // double margin_level = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_margin_level = this->_internal_margin_level();
  uint64_t raw_margin_level;
  memcpy(&raw_margin_level, &tmp_margin_level, sizeof(tmp_margin_level));
  if (raw_margin_level != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_margin_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbot.TradeEvent)
  return target;
}

size_t TradeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbot.TradeEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_time = 2;
  if (!this->_internal_event_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_time());
  }

  // string broker_time = 3;
  if (!this->_internal_broker_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broker_time());
  }

  // string local_time = 4;
  if (!this->_internal_local_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_time());
  }

  // string action = 5;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string source = 8;
  if (!this->_internal_source().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string symbol = 9;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string comment = 18;
  if (!this->_internal_comment().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // string open_time = 22;
  if (!this->_internal_open_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_time());
  }

  // string trace_id = 29;
  if (!this->_internal_trace_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_id());
  }

  // string span_id = 30;
  if (!this->_internal_span_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_span_id());
  }

  // int32 event_id = 1;
  if (this->_internal_event_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_id());
  }

  // int32 ticket = 6;
  if (this->_internal_ticket() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ticket());
  }

  // int32 magic = 7;
  if (this->_internal_magic() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_magic());
  }

  // int32 order_type = 10;
  if (this->_internal_order_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_order_type());
  }

  // double lots = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lots = this->_internal_lots();
  uint64_t raw_lots;
  memcpy(&raw_lots, &tmp_lots, sizeof(tmp_lots));
  if (raw_lots != 0) {
    total_size += 1 + 8;
  }

  // double price = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 8;
  }

  // double sl = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sl = this->_internal_sl();
  uint64_t raw_sl;
  memcpy(&raw_sl, &tmp_sl, sizeof(tmp_sl));
  if (raw_sl != 0) {
    total_size += 1 + 8;
  }

  // double tp = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tp = this->_internal_tp();
  uint64_t raw_tp;
  memcpy(&raw_tp, &tmp_tp, sizeof(tmp_tp));
  if (raw_tp != 0) {
    total_size += 1 + 8;
  }

  // double profit = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_profit = this->_internal_profit();
  uint64_t raw_profit;
  memcpy(&raw_profit, &tmp_profit, sizeof(tmp_profit));
  if (raw_profit != 0) {
    total_size += 1 + 8;
  }

  // double profit_after_trade = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_profit_after_trade = this->_internal_profit_after_trade();
  uint64_t raw_profit_after_trade;
  memcpy(&raw_profit_after_trade, &tmp_profit_after_trade, sizeof(tmp_profit_after_trade));
  if (raw_profit_after_trade != 0) {
    total_size += 2 + 8;
  }

  // double spread = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_spread = this->_internal_spread();
  uint64_t raw_spread;
  memcpy(&raw_spread, &tmp_spread, sizeof(tmp_spread));
  if (raw_spread != 0) {
    total_size += 2 + 8;
  }

  // double remaining_lots = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_remaining_lots = this->_internal_remaining_lots();
  uint64_t raw_remaining_lots;
  memcpy(&raw_remaining_lots, &tmp_remaining_lots, sizeof(tmp_remaining_lots));
  if (raw_remaining_lots != 0) {
    total_size += 2 + 8;
  }

  // double slippage = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_slippage = this->_internal_slippage();
  uint64_t raw_slippage;
  memcpy(&raw_slippage, &tmp_slippage, sizeof(tmp_slippage));
  if (raw_slippage != 0) {
    total_size += 2 + 8;
  }

  // double book_bid_vol = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_book_bid_vol = this->_internal_book_bid_vol();
  uint64_t raw_book_bid_vol;
  memcpy(&raw_book_bid_vol, &tmp_book_bid_vol, sizeof(tmp_book_bid_vol));
  if (raw_book_bid_vol != 0) {
    total_size += 2 + 8;
  }

  // double book_ask_vol = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_book_ask_vol = this->_internal_book_ask_vol();
  uint64_t raw_book_ask_vol;
  memcpy(&raw_book_ask_vol, &tmp_book_ask_vol, sizeof(tmp_book_ask_vol));
  if (raw_book_ask_vol != 0) {
    total_size += 2 + 8;
  }

  // int32 volume = 21;
  if (this->_internal_volume() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_volume());
  }

  // int32 decision_id = 28;
  if (this->_internal_decision_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_decision_id());
  }

  // double book_imbalance = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_book_imbalance = this->_internal_book_imbalance();
  uint64_t raw_book_imbalance;
  memcpy(&raw_book_imbalance, &tmp_book_imbalance, sizeof(tmp_book_imbalance));
  if (raw_book_imbalance != 0) {
    total_size += 2 + 8;
  }

  // double sl_hit_dist = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sl_hit_dist = this->_internal_sl_hit_dist();
  uint64_t raw_sl_hit_dist;
  memcpy(&raw_sl_hit_dist, &tmp_sl_hit_dist, sizeof(tmp_sl_hit_dist));
  if (raw_sl_hit_dist != 0) {
    total_size += 2 + 8;
  }

  // double tp_hit_dist = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tp_hit_dist = this->_internal_tp_hit_dist();
  uint64_t raw_tp_hit_dist;
  memcpy(&raw_tp_hit_dist, &tmp_tp_hit_dist, sizeof(tmp_tp_hit_dist));
  if (raw_tp_hit_dist != 0) {
    total_size += 2 + 8;
  }

  // double equity = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_equity = this->_internal_equity();
  uint64_t raw_equity;
  memcpy(&raw_equity, &tmp_equity, sizeof(tmp_equity));
  if (raw_equity != 0) {
    total_size += 2 + 8;
  }

  // double margin_level = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_margin_level = this->_internal_margin_level();
  uint64_t raw_margin_level;
  memcpy(&raw_margin_level, &tmp_margin_level, sizeof(tmp_margin_level));
  if (raw_margin_level != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradeEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradeEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradeEvent::GetClassData() const { return &_class_data_; }


void TradeEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradeEvent*>(&to_msg);
  auto& from = static_cast<const TradeEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tbot.TradeEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_time().empty()) {
    _this->_internal_set_event_time(from._internal_event_time());
  }
  if (!from._internal_broker_time().empty()) {
    _this->_internal_set_broker_time(from._internal_broker_time());
  }
  if (!from._internal_local_time().empty()) {
    _this->_internal_set_local_time(from._internal_local_time());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (!from._internal_source().empty()) {
    _this->_internal_set_source(from._internal_source());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (!from._internal_open_time().empty()) {
    _this->_internal_set_open_time(from._internal_open_time());
  }
  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (!from._internal_span_id().empty()) {
    _this->_internal_set_span_id(from._internal_span_id());
  }
  if (from._internal_event_id() != 0) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (from._internal_ticket() != 0) {
    _this->_internal_set_ticket(from._internal_ticket());
  }
  if (from._internal_magic() != 0) {
    _this->_internal_set_magic(from._internal_magic());
  }
  if (from._internal_order_type() != 0) {
    _this->_internal_set_order_type(from._internal_order_type());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lots = from._internal_lots();
  uint64_t raw_lots;
  memcpy(&raw_lots, &tmp_lots, sizeof(tmp_lots));
  if (raw_lots != 0) {
    _this->_internal_set_lots(from._internal_lots());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sl = from._internal_sl();
  uint64_t raw_sl;
  memcpy(&raw_sl, &tmp_sl, sizeof(tmp_sl));
  if (raw_sl != 0) {
    _this->_internal_set_sl(from._internal_sl());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tp = from._internal_tp();
  uint64_t raw_tp;
  memcpy(&raw_tp, &tmp_tp, sizeof(tmp_tp));
  if (raw_tp != 0) {
    _this->_internal_set_tp(from._internal_tp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_profit = from._internal_profit();
  uint64_t raw_profit;
  memcpy(&raw_profit, &tmp_profit, sizeof(tmp_profit));
  if (raw_profit != 0) {
    _this->_internal_set_profit(from._internal_profit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_profit_after_trade = from._internal_profit_after_trade();
  uint64_t raw_profit_after_trade;
  memcpy(&raw_profit_after_trade, &tmp_profit_after_trade, sizeof(tmp_profit_after_trade));
  if (raw_profit_after_trade != 0) {
    _this->_internal_set_profit_after_trade(from._internal_profit_after_trade());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_spread = from._internal_spread();
  uint64_t raw_spread;
  memcpy(&raw_spread, &tmp_spread, sizeof(tmp_spread));
  if (raw_spread != 0) {
    _this->_internal_set_spread(from._internal_spread());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_remaining_lots = from._internal_remaining_lots();
  uint64_t raw_remaining_lots;
  memcpy(&raw_remaining_lots, &tmp_remaining_lots, sizeof(tmp_remaining_lots));
  if (raw_remaining_lots != 0) {
    _this->_internal_set_remaining_lots(from._internal_remaining_lots());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_slippage = from._internal_slippage();
  uint64_t raw_slippage;
  memcpy(&raw_slippage, &tmp_slippage, sizeof(tmp_slippage));
  if (raw_slippage != 0) {
    _this->_internal_set_slippage(from._internal_slippage());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_book_bid_vol = from._internal_book_bid_vol();
  uint64_t raw_book_bid_vol;
  memcpy(&raw_book_bid_vol, &tmp_book_bid_vol, sizeof(tmp_book_bid_vol));
  if (raw_book_bid_vol != 0) {
    _this->_internal_set_book_bid_vol(from._internal_book_bid_vol());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_book_ask_vol = from._internal_book_ask_vol();
  uint64_t raw_book_ask_vol;
  memcpy(&raw_book_ask_vol, &tmp_book_ask_vol, sizeof(tmp_book_ask_vol));
  if (raw_book_ask_vol != 0) {
    _this->_internal_set_book_ask_vol(from._internal_book_ask_vol());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_decision_id() != 0) {
    _this->_internal_set_decision_id(from._internal_decision_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_book_imbalance = from._internal_book_imbalance();
  uint64_t raw_book_imbalance;
  memcpy(&raw_book_imbalance, &tmp_book_imbalance, sizeof(tmp_book_imbalance));
  if (raw_book_imbalance != 0) {
    _this->_internal_set_book_imbalance(from._internal_book_imbalance());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sl_hit_dist = from._internal_sl_hit_dist();
  uint64_t raw_sl_hit_dist;
  memcpy(&raw_sl_hit_dist, &tmp_sl_hit_dist, sizeof(tmp_sl_hit_dist));
  if (raw_sl_hit_dist != 0) {
    _this->_internal_set_sl_hit_dist(from._internal_sl_hit_dist());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tp_hit_dist = from._internal_tp_hit_dist();
  uint64_t raw_tp_hit_dist;
  memcpy(&raw_tp_hit_dist, &tmp_tp_hit_dist, sizeof(tmp_tp_hit_dist));
  if (raw_tp_hit_dist != 0) {
    _this->_internal_set_tp_hit_dist(from._internal_tp_hit_dist());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_equity = from._internal_equity();
  uint64_t raw_equity;
  memcpy(&raw_equity, &tmp_equity, sizeof(tmp_equity));
  if (raw_equity != 0) {
    _this->_internal_set_equity(from._internal_equity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_margin_level = from._internal_margin_level();
  uint64_t raw_margin_level;
  memcpy(&raw_margin_level, &tmp_margin_level, sizeof(tmp_margin_level));
  if (raw_margin_level != 0) {
    _this->_internal_set_margin_level(from._internal_margin_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradeEvent::CopyFrom(const TradeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbot.TradeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeEvent::IsInitialized() const {
  return true;
}

void TradeEvent::InternalSwap(TradeEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_time_, lhs_arena,
      &other->_impl_.event_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broker_time_, lhs_arena,
      &other->_impl_.broker_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_time_, lhs_arena,
      &other->_impl_.local_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_time_, lhs_arena,
      &other->_impl_.open_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_id_, lhs_arena,
      &other->_impl_.trace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.span_id_, lhs_arena,
      &other->_impl_.span_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeEvent, _impl_.margin_level_)
      + sizeof(TradeEvent::_impl_.margin_level_)
      - PROTOBUF_FIELD_OFFSET(TradeEvent, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trade_5fevent_2eproto_getter, &descriptor_table_trade_5fevent_2eproto_once,
      file_level_metadata_trade_5fevent_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tbot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tbot::TradeEvent*
Arena::CreateMaybeMessage< ::tbot::TradeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbot::TradeEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
