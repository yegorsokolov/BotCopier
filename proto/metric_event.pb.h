// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metric_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metric_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metric_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metric_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metric_5fevent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metric_5fevent_2eproto;
namespace tbot {
class MetricEvent;
struct MetricEventDefaultTypeInternal;
extern MetricEventDefaultTypeInternal _MetricEvent_default_instance_;
}  // namespace tbot
PROTOBUF_NAMESPACE_OPEN
template<> ::tbot::MetricEvent* Arena::CreateMaybeMessage<::tbot::MetricEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tbot {

// ===================================================================

class MetricEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tbot.MetricEvent) */ {
 public:
  inline MetricEvent() : MetricEvent(nullptr) {}
  ~MetricEvent() override;
  explicit PROTOBUF_CONSTEXPR MetricEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricEvent(const MetricEvent& from);
  MetricEvent(MetricEvent&& from) noexcept
    : MetricEvent() {
    *this = ::std::move(from);
  }

  inline MetricEvent& operator=(const MetricEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricEvent& operator=(MetricEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricEvent* internal_default_instance() {
    return reinterpret_cast<const MetricEvent*>(
               &_MetricEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetricEvent& a, MetricEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetricEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetricEvent& from) {
    MetricEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tbot.MetricEvent";
  }
  protected:
  explicit MetricEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kWinRateFieldNumber = 3,
    kMagicFieldNumber = 2,
    kTradeCountFieldNumber = 5,
    kAvgProfitFieldNumber = 4,
    kDrawdownFieldNumber = 6,
    kSharpeFieldNumber = 7,
    kFileWriteErrorsFieldNumber = 8,
    kSocketErrorsFieldNumber = 9,
    kBookRefreshSecondsFieldNumber = 10,
    kVarBreachCountFieldNumber = 11,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time();
  PROTOBUF_NODISCARD std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // double win_rate = 3;
  void clear_win_rate();
  double win_rate() const;
  void set_win_rate(double value);
  private:
  double _internal_win_rate() const;
  void _internal_set_win_rate(double value);
  public:

  // int32 magic = 2;
  void clear_magic();
  int32_t magic() const;
  void set_magic(int32_t value);
  private:
  int32_t _internal_magic() const;
  void _internal_set_magic(int32_t value);
  public:

  // int32 trade_count = 5;
  void clear_trade_count();
  int32_t trade_count() const;
  void set_trade_count(int32_t value);
  private:
  int32_t _internal_trade_count() const;
  void _internal_set_trade_count(int32_t value);
  public:

  // double avg_profit = 4;
  void clear_avg_profit();
  double avg_profit() const;
  void set_avg_profit(double value);
  private:
  double _internal_avg_profit() const;
  void _internal_set_avg_profit(double value);
  public:

  // double drawdown = 6;
  void clear_drawdown();
  double drawdown() const;
  void set_drawdown(double value);
  private:
  double _internal_drawdown() const;
  void _internal_set_drawdown(double value);
  public:

  // double sharpe = 7;
  void clear_sharpe();
  double sharpe() const;
  void set_sharpe(double value);
  private:
  double _internal_sharpe() const;
  void _internal_set_sharpe(double value);
  public:

  // int32 file_write_errors = 8;
  void clear_file_write_errors();
  int32_t file_write_errors() const;
  void set_file_write_errors(int32_t value);
  private:
  int32_t _internal_file_write_errors() const;
  void _internal_set_file_write_errors(int32_t value);
  public:

  // int32 socket_errors = 9;
  void clear_socket_errors();
  int32_t socket_errors() const;
  void set_socket_errors(int32_t value);
  private:
  int32_t _internal_socket_errors() const;
  void _internal_set_socket_errors(int32_t value);
  public:

  // int32 book_refresh_seconds = 10;
  void clear_book_refresh_seconds();
  int32_t book_refresh_seconds() const;
  void set_book_refresh_seconds(int32_t value);
  private:
  int32_t _internal_book_refresh_seconds() const;
  void _internal_set_book_refresh_seconds(int32_t value);
  public:

  // int32 var_breach_count = 11;
  void clear_var_breach_count();
  int32_t var_breach_count() const;
  void set_var_breach_count(int32_t value);
  private:
  int32_t _internal_var_breach_count() const;
  void _internal_set_var_breach_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tbot.MetricEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
    double win_rate_;
    int32_t magic_;
    int32_t trade_count_;
    double avg_profit_;
    double drawdown_;
    double sharpe_;
    int32_t file_write_errors_;
    int32_t socket_errors_;
    int32_t book_refresh_seconds_;
    int32_t var_breach_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metric_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetricEvent

// string time = 1;
inline void MetricEvent::clear_time() {
  _impl_.time_.ClearToEmpty();
}
inline const std::string& MetricEvent::time() const {
  // @@protoc_insertion_point(field_get:tbot.MetricEvent.time)
  return _internal_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricEvent::set_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.MetricEvent.time)
}
inline std::string* MetricEvent::mutable_time() {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tbot.MetricEvent.time)
  return _s;
}
inline const std::string& MetricEvent::_internal_time() const {
  return _impl_.time_.Get();
}
inline void MetricEvent::_internal_set_time(const std::string& value) {
  
  _impl_.time_.Set(value, GetArenaForAllocation());
}
inline std::string* MetricEvent::_internal_mutable_time() {
  
  return _impl_.time_.Mutable(GetArenaForAllocation());
}
inline std::string* MetricEvent::release_time() {
  // @@protoc_insertion_point(field_release:tbot.MetricEvent.time)
  return _impl_.time_.Release();
}
inline void MetricEvent::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  _impl_.time_.SetAllocated(time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_.IsDefault()) {
    _impl_.time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.MetricEvent.time)
}

// int32 magic = 2;
inline void MetricEvent::clear_magic() {
  _impl_.magic_ = 0;
}
inline int32_t MetricEvent::_internal_magic() const {
  return _impl_.magic_;
}
inline int32_t MetricEvent::magic() const {
  // @@protoc_insertion_point(field_get:tbot.MetricEvent.magic)
  return _internal_magic();
}
inline void MetricEvent::_internal_set_magic(int32_t value) {
  
  _impl_.magic_ = value;
}
inline void MetricEvent::set_magic(int32_t value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:tbot.MetricEvent.magic)
}

// double win_rate = 3;
inline void MetricEvent::clear_win_rate() {
  _impl_.win_rate_ = 0;
}
inline double MetricEvent::_internal_win_rate() const {
  return _impl_.win_rate_;
}
inline double MetricEvent::win_rate() const {
  // @@protoc_insertion_point(field_get:tbot.MetricEvent.win_rate)
  return _internal_win_rate();
}
inline void MetricEvent::_internal_set_win_rate(double value) {
  
  _impl_.win_rate_ = value;
}
inline void MetricEvent::set_win_rate(double value) {
  _internal_set_win_rate(value);
  // @@protoc_insertion_point(field_set:tbot.MetricEvent.win_rate)
}

// double avg_profit = 4;
inline void MetricEvent::clear_avg_profit() {
  _impl_.avg_profit_ = 0;
}
inline double MetricEvent::_internal_avg_profit() const {
  return _impl_.avg_profit_;
}
inline double MetricEvent::avg_profit() const {
  // @@protoc_insertion_point(field_get:tbot.MetricEvent.avg_profit)
  return _internal_avg_profit();
}
inline void MetricEvent::_internal_set_avg_profit(double value) {
  
  _impl_.avg_profit_ = value;
}
inline void MetricEvent::set_avg_profit(double value) {
  _internal_set_avg_profit(value);
  // @@protoc_insertion_point(field_set:tbot.MetricEvent.avg_profit)
}

// int32 trade_count = 5;
inline void MetricEvent::clear_trade_count() {
  _impl_.trade_count_ = 0;
}
inline int32_t MetricEvent::_internal_trade_count() const {
  return _impl_.trade_count_;
}
inline int32_t MetricEvent::trade_count() const {
  // @@protoc_insertion_point(field_get:tbot.MetricEvent.trade_count)
  return _internal_trade_count();
}
inline void MetricEvent::_internal_set_trade_count(int32_t value) {
  
  _impl_.trade_count_ = value;
}
inline void MetricEvent::set_trade_count(int32_t value) {
  _internal_set_trade_count(value);
  // @@protoc_insertion_point(field_set:tbot.MetricEvent.trade_count)
}

// double drawdown = 6;
inline void MetricEvent::clear_drawdown() {
  _impl_.drawdown_ = 0;
}
inline double MetricEvent::_internal_drawdown() const {
  return _impl_.drawdown_;
}
inline double MetricEvent::drawdown() const {
  // @@protoc_insertion_point(field_get:tbot.MetricEvent.drawdown)
  return _internal_drawdown();
}
inline void MetricEvent::_internal_set_drawdown(double value) {
  
  _impl_.drawdown_ = value;
}
inline void MetricEvent::set_drawdown(double value) {
  _internal_set_drawdown(value);
  // @@protoc_insertion_point(field_set:tbot.MetricEvent.drawdown)
}

// double sharpe = 7;
inline void MetricEvent::clear_sharpe() {
  _impl_.sharpe_ = 0;
}
inline double MetricEvent::_internal_sharpe() const {
  return _impl_.sharpe_;
}
inline double MetricEvent::sharpe() const {
  // @@protoc_insertion_point(field_get:tbot.MetricEvent.sharpe)
  return _internal_sharpe();
}
inline void MetricEvent::_internal_set_sharpe(double value) {
  
  _impl_.sharpe_ = value;
}
inline void MetricEvent::set_sharpe(double value) {
  _internal_set_sharpe(value);
  // @@protoc_insertion_point(field_set:tbot.MetricEvent.sharpe)
}

// int32 file_write_errors = 8;
inline void MetricEvent::clear_file_write_errors() {
  _impl_.file_write_errors_ = 0;
}
inline int32_t MetricEvent::_internal_file_write_errors() const {
  return _impl_.file_write_errors_;
}
inline int32_t MetricEvent::file_write_errors() const {
  // @@protoc_insertion_point(field_get:tbot.MetricEvent.file_write_errors)
  return _internal_file_write_errors();
}
inline void MetricEvent::_internal_set_file_write_errors(int32_t value) {
  
  _impl_.file_write_errors_ = value;
}
inline void MetricEvent::set_file_write_errors(int32_t value) {
  _internal_set_file_write_errors(value);
  // @@protoc_insertion_point(field_set:tbot.MetricEvent.file_write_errors)
}

// int32 socket_errors = 9;
inline void MetricEvent::clear_socket_errors() {
  _impl_.socket_errors_ = 0;
}
inline int32_t MetricEvent::_internal_socket_errors() const {
  return _impl_.socket_errors_;
}
inline int32_t MetricEvent::socket_errors() const {
  // @@protoc_insertion_point(field_get:tbot.MetricEvent.socket_errors)
  return _internal_socket_errors();
}
inline void MetricEvent::_internal_set_socket_errors(int32_t value) {
  
  _impl_.socket_errors_ = value;
}
inline void MetricEvent::set_socket_errors(int32_t value) {
  _internal_set_socket_errors(value);
  // @@protoc_insertion_point(field_set:tbot.MetricEvent.socket_errors)
}

// int32 book_refresh_seconds = 10;
inline void MetricEvent::clear_book_refresh_seconds() {
  _impl_.book_refresh_seconds_ = 0;
}
inline int32_t MetricEvent::_internal_book_refresh_seconds() const {
  return _impl_.book_refresh_seconds_;
}
inline int32_t MetricEvent::book_refresh_seconds() const {
  // @@protoc_insertion_point(field_get:tbot.MetricEvent.book_refresh_seconds)
  return _internal_book_refresh_seconds();
}
inline void MetricEvent::_internal_set_book_refresh_seconds(int32_t value) {
  
  _impl_.book_refresh_seconds_ = value;
}
inline void MetricEvent::set_book_refresh_seconds(int32_t value) {
  _internal_set_book_refresh_seconds(value);
  // @@protoc_insertion_point(field_set:tbot.MetricEvent.book_refresh_seconds)
}

// int32 var_breach_count = 11;
inline void MetricEvent::clear_var_breach_count() {
  _impl_.var_breach_count_ = 0;
}
inline int32_t MetricEvent::_internal_var_breach_count() const {
  return _impl_.var_breach_count_;
}
inline int32_t MetricEvent::var_breach_count() const {
  // @@protoc_insertion_point(field_get:tbot.MetricEvent.var_breach_count)
  return _internal_var_breach_count();
}
inline void MetricEvent::_internal_set_var_breach_count(int32_t value) {
  
  _impl_.var_breach_count_ = value;
}
inline void MetricEvent::set_var_breach_count(int32_t value) {
  _internal_set_var_breach_count(value);
  // @@protoc_insertion_point(field_set:tbot.MetricEvent.var_breach_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tbot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metric_5fevent_2eproto
