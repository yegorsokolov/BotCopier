// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trade_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trade_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trade_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trade_5fevent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_5fevent_2eproto;
namespace tbot {
class TradeEvent;
struct TradeEventDefaultTypeInternal;
extern TradeEventDefaultTypeInternal _TradeEvent_default_instance_;
}  // namespace tbot
PROTOBUF_NAMESPACE_OPEN
template<> ::tbot::TradeEvent* Arena::CreateMaybeMessage<::tbot::TradeEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tbot {

// ===================================================================

class TradeEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tbot.TradeEvent) */ {
 public:
  inline TradeEvent() : TradeEvent(nullptr) {}
  ~TradeEvent() override;
  explicit PROTOBUF_CONSTEXPR TradeEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TradeEvent(const TradeEvent& from);
  TradeEvent(TradeEvent&& from) noexcept
    : TradeEvent() {
    *this = ::std::move(from);
  }

  inline TradeEvent& operator=(const TradeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeEvent& operator=(TradeEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradeEvent* internal_default_instance() {
    return reinterpret_cast<const TradeEvent*>(
               &_TradeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TradeEvent& a, TradeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradeEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TradeEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TradeEvent& from) {
    TradeEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tbot.TradeEvent";
  }
  protected:
  explicit TradeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTimeFieldNumber = 2,
    kBrokerTimeFieldNumber = 3,
    kLocalTimeFieldNumber = 4,
    kActionFieldNumber = 5,
    kSourceFieldNumber = 8,
    kSymbolFieldNumber = 9,
    kCommentFieldNumber = 18,
    kOpenTimeFieldNumber = 22,
    kTraceIdFieldNumber = 29,
    kSpanIdFieldNumber = 30,
    kEventIdFieldNumber = 1,
    kTicketFieldNumber = 6,
    kMagicFieldNumber = 7,
    kOrderTypeFieldNumber = 10,
    kLotsFieldNumber = 11,
    kPriceFieldNumber = 12,
    kSlFieldNumber = 13,
    kTpFieldNumber = 14,
    kProfitFieldNumber = 15,
    kProfitAfterTradeFieldNumber = 16,
    kSpreadFieldNumber = 17,
    kRemainingLotsFieldNumber = 19,
    kSlippageFieldNumber = 20,
    kBookBidVolFieldNumber = 23,
    kBookAskVolFieldNumber = 24,
    kVolumeFieldNumber = 21,
    kDecisionIdFieldNumber = 28,
    kBookImbalanceFieldNumber = 25,
    kSlHitDistFieldNumber = 26,
    kTpHitDistFieldNumber = 27,
  };
  // string event_time = 2;
  void clear_event_time();
  const std::string& event_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_time();
  PROTOBUF_NODISCARD std::string* release_event_time();
  void set_allocated_event_time(std::string* event_time);
  private:
  const std::string& _internal_event_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_time(const std::string& value);
  std::string* _internal_mutable_event_time();
  public:

  // string broker_time = 3;
  void clear_broker_time();
  const std::string& broker_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broker_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broker_time();
  PROTOBUF_NODISCARD std::string* release_broker_time();
  void set_allocated_broker_time(std::string* broker_time);
  private:
  const std::string& _internal_broker_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_time(const std::string& value);
  std::string* _internal_mutable_broker_time();
  public:

  // string local_time = 4;
  void clear_local_time();
  const std::string& local_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_time();
  PROTOBUF_NODISCARD std::string* release_local_time();
  void set_allocated_local_time(std::string* local_time);
  private:
  const std::string& _internal_local_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_time(const std::string& value);
  std::string* _internal_mutable_local_time();
  public:

  // string action = 5;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string source = 8;
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string symbol = 9;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string comment = 18;
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string open_time = 22;
  void clear_open_time();
  const std::string& open_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_open_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_open_time();
  PROTOBUF_NODISCARD std::string* release_open_time();
  void set_allocated_open_time(std::string* open_time);
  private:
  const std::string& _internal_open_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_time(const std::string& value);
  std::string* _internal_mutable_open_time();
  public:

  // string trace_id = 29;
  void clear_trace_id();
  const std::string& trace_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trace_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trace_id();
  PROTOBUF_NODISCARD std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // string span_id = 30;
  void clear_span_id();
  const std::string& span_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_span_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_span_id();
  PROTOBUF_NODISCARD std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // int32 event_id = 1;
  void clear_event_id();
  int32_t event_id() const;
  void set_event_id(int32_t value);
  private:
  int32_t _internal_event_id() const;
  void _internal_set_event_id(int32_t value);
  public:

  // int32 ticket = 6;
  void clear_ticket();
  int32_t ticket() const;
  void set_ticket(int32_t value);
  private:
  int32_t _internal_ticket() const;
  void _internal_set_ticket(int32_t value);
  public:

  // int32 magic = 7;
  void clear_magic();
  int32_t magic() const;
  void set_magic(int32_t value);
  private:
  int32_t _internal_magic() const;
  void _internal_set_magic(int32_t value);
  public:

  // int32 order_type = 10;
  void clear_order_type();
  int32_t order_type() const;
  void set_order_type(int32_t value);
  private:
  int32_t _internal_order_type() const;
  void _internal_set_order_type(int32_t value);
  public:

  // double lots = 11;
  void clear_lots();
  double lots() const;
  void set_lots(double value);
  private:
  double _internal_lots() const;
  void _internal_set_lots(double value);
  public:

  // double price = 12;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // double sl = 13;
  void clear_sl();
  double sl() const;
  void set_sl(double value);
  private:
  double _internal_sl() const;
  void _internal_set_sl(double value);
  public:

  // double tp = 14;
  void clear_tp();
  double tp() const;
  void set_tp(double value);
  private:
  double _internal_tp() const;
  void _internal_set_tp(double value);
  public:

  // double profit = 15;
  void clear_profit();
  double profit() const;
  void set_profit(double value);
  private:
  double _internal_profit() const;
  void _internal_set_profit(double value);
  public:

  // double profit_after_trade = 16;
  void clear_profit_after_trade();
  double profit_after_trade() const;
  void set_profit_after_trade(double value);
  private:
  double _internal_profit_after_trade() const;
  void _internal_set_profit_after_trade(double value);
  public:

  // double spread = 17;
  void clear_spread();
  double spread() const;
  void set_spread(double value);
  private:
  double _internal_spread() const;
  void _internal_set_spread(double value);
  public:

  // double remaining_lots = 19;
  void clear_remaining_lots();
  double remaining_lots() const;
  void set_remaining_lots(double value);
  private:
  double _internal_remaining_lots() const;
  void _internal_set_remaining_lots(double value);
  public:

  // double slippage = 20;
  void clear_slippage();
  double slippage() const;
  void set_slippage(double value);
  private:
  double _internal_slippage() const;
  void _internal_set_slippage(double value);
  public:

  // double book_bid_vol = 23;
  void clear_book_bid_vol();
  double book_bid_vol() const;
  void set_book_bid_vol(double value);
  private:
  double _internal_book_bid_vol() const;
  void _internal_set_book_bid_vol(double value);
  public:

  // double book_ask_vol = 24;
  void clear_book_ask_vol();
  double book_ask_vol() const;
  void set_book_ask_vol(double value);
  private:
  double _internal_book_ask_vol() const;
  void _internal_set_book_ask_vol(double value);
  public:

  // int32 volume = 21;
  void clear_volume();
  int32_t volume() const;
  void set_volume(int32_t value);
  private:
  int32_t _internal_volume() const;
  void _internal_set_volume(int32_t value);
  public:

  // int32 decision_id = 28;
  void clear_decision_id();
  int32_t decision_id() const;
  void set_decision_id(int32_t value);
  private:
  int32_t _internal_decision_id() const;
  void _internal_set_decision_id(int32_t value);
  public:

  // double book_imbalance = 25;
  void clear_book_imbalance();
  double book_imbalance() const;
  void set_book_imbalance(double value);
  private:
  double _internal_book_imbalance() const;
  void _internal_set_book_imbalance(double value);
  public:

  // double sl_hit_dist = 26;
  void clear_sl_hit_dist();
  double sl_hit_dist() const;
  void set_sl_hit_dist(double value);
  private:
  double _internal_sl_hit_dist() const;
  void _internal_set_sl_hit_dist(double value);
  public:

  // double tp_hit_dist = 27;
  void clear_tp_hit_dist();
  double tp_hit_dist() const;
  void set_tp_hit_dist(double value);
  private:
  double _internal_tp_hit_dist() const;
  void _internal_set_tp_hit_dist(double value);
  public:

  // @@protoc_insertion_point(class_scope:tbot.TradeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
    int32_t event_id_;
    int32_t ticket_;
    int32_t magic_;
    int32_t order_type_;
    double lots_;
    double price_;
    double sl_;
    double tp_;
    double profit_;
    double profit_after_trade_;
    double spread_;
    double remaining_lots_;
    double slippage_;
    double book_bid_vol_;
    double book_ask_vol_;
    int32_t volume_;
    int32_t decision_id_;
    double book_imbalance_;
    double sl_hit_dist_;
    double tp_hit_dist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trade_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradeEvent

// int32 event_id = 1;
inline void TradeEvent::clear_event_id() {
  _impl_.event_id_ = 0;
}
inline int32_t TradeEvent::_internal_event_id() const {
  return _impl_.event_id_;
}
inline int32_t TradeEvent::event_id() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.event_id)
  return _internal_event_id();
}
inline void TradeEvent::_internal_set_event_id(int32_t value) {
  
  _impl_.event_id_ = value;
}
inline void TradeEvent::set_event_id(int32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.event_id)
}

// string event_time = 2;
inline void TradeEvent::clear_event_time() {
  _impl_.event_time_.ClearToEmpty();
}
inline const std::string& TradeEvent::event_time() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.event_time)
  return _internal_event_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeEvent::set_event_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.event_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.event_time)
}
inline std::string* TradeEvent::mutable_event_time() {
  std::string* _s = _internal_mutable_event_time();
  // @@protoc_insertion_point(field_mutable:tbot.TradeEvent.event_time)
  return _s;
}
inline const std::string& TradeEvent::_internal_event_time() const {
  return _impl_.event_time_.Get();
}
inline void TradeEvent::_internal_set_event_time(const std::string& value) {
  
  _impl_.event_time_.Set(value, GetArenaForAllocation());
}
inline std::string* TradeEvent::_internal_mutable_event_time() {
  
  return _impl_.event_time_.Mutable(GetArenaForAllocation());
}
inline std::string* TradeEvent::release_event_time() {
  // @@protoc_insertion_point(field_release:tbot.TradeEvent.event_time)
  return _impl_.event_time_.Release();
}
inline void TradeEvent::set_allocated_event_time(std::string* event_time) {
  if (event_time != nullptr) {
    
  } else {
    
  }
  _impl_.event_time_.SetAllocated(event_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_time_.IsDefault()) {
    _impl_.event_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.TradeEvent.event_time)
}

// string broker_time = 3;
inline void TradeEvent::clear_broker_time() {
  _impl_.broker_time_.ClearToEmpty();
}
inline const std::string& TradeEvent::broker_time() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.broker_time)
  return _internal_broker_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeEvent::set_broker_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.broker_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.broker_time)
}
inline std::string* TradeEvent::mutable_broker_time() {
  std::string* _s = _internal_mutable_broker_time();
  // @@protoc_insertion_point(field_mutable:tbot.TradeEvent.broker_time)
  return _s;
}
inline const std::string& TradeEvent::_internal_broker_time() const {
  return _impl_.broker_time_.Get();
}
inline void TradeEvent::_internal_set_broker_time(const std::string& value) {
  
  _impl_.broker_time_.Set(value, GetArenaForAllocation());
}
inline std::string* TradeEvent::_internal_mutable_broker_time() {
  
  return _impl_.broker_time_.Mutable(GetArenaForAllocation());
}
inline std::string* TradeEvent::release_broker_time() {
  // @@protoc_insertion_point(field_release:tbot.TradeEvent.broker_time)
  return _impl_.broker_time_.Release();
}
inline void TradeEvent::set_allocated_broker_time(std::string* broker_time) {
  if (broker_time != nullptr) {
    
  } else {
    
  }
  _impl_.broker_time_.SetAllocated(broker_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broker_time_.IsDefault()) {
    _impl_.broker_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.TradeEvent.broker_time)
}

// string local_time = 4;
inline void TradeEvent::clear_local_time() {
  _impl_.local_time_.ClearToEmpty();
}
inline const std::string& TradeEvent::local_time() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.local_time)
  return _internal_local_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeEvent::set_local_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.local_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.local_time)
}
inline std::string* TradeEvent::mutable_local_time() {
  std::string* _s = _internal_mutable_local_time();
  // @@protoc_insertion_point(field_mutable:tbot.TradeEvent.local_time)
  return _s;
}
inline const std::string& TradeEvent::_internal_local_time() const {
  return _impl_.local_time_.Get();
}
inline void TradeEvent::_internal_set_local_time(const std::string& value) {
  
  _impl_.local_time_.Set(value, GetArenaForAllocation());
}
inline std::string* TradeEvent::_internal_mutable_local_time() {
  
  return _impl_.local_time_.Mutable(GetArenaForAllocation());
}
inline std::string* TradeEvent::release_local_time() {
  // @@protoc_insertion_point(field_release:tbot.TradeEvent.local_time)
  return _impl_.local_time_.Release();
}
inline void TradeEvent::set_allocated_local_time(std::string* local_time) {
  if (local_time != nullptr) {
    
  } else {
    
  }
  _impl_.local_time_.SetAllocated(local_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_time_.IsDefault()) {
    _impl_.local_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.TradeEvent.local_time)
}

// string action = 5;
inline void TradeEvent::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& TradeEvent::action() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeEvent::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.action)
}
inline std::string* TradeEvent::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:tbot.TradeEvent.action)
  return _s;
}
inline const std::string& TradeEvent::_internal_action() const {
  return _impl_.action_.Get();
}
inline void TradeEvent::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* TradeEvent::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* TradeEvent::release_action() {
  // @@protoc_insertion_point(field_release:tbot.TradeEvent.action)
  return _impl_.action_.Release();
}
inline void TradeEvent::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.TradeEvent.action)
}

// int32 ticket = 6;
inline void TradeEvent::clear_ticket() {
  _impl_.ticket_ = 0;
}
inline int32_t TradeEvent::_internal_ticket() const {
  return _impl_.ticket_;
}
inline int32_t TradeEvent::ticket() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.ticket)
  return _internal_ticket();
}
inline void TradeEvent::_internal_set_ticket(int32_t value) {
  
  _impl_.ticket_ = value;
}
inline void TradeEvent::set_ticket(int32_t value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.ticket)
}

// int32 magic = 7;
inline void TradeEvent::clear_magic() {
  _impl_.magic_ = 0;
}
inline int32_t TradeEvent::_internal_magic() const {
  return _impl_.magic_;
}
inline int32_t TradeEvent::magic() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.magic)
  return _internal_magic();
}
inline void TradeEvent::_internal_set_magic(int32_t value) {
  
  _impl_.magic_ = value;
}
inline void TradeEvent::set_magic(int32_t value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.magic)
}

// string source = 8;
inline void TradeEvent::clear_source() {
  _impl_.source_.ClearToEmpty();
}
inline const std::string& TradeEvent::source() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeEvent::set_source(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.source)
}
inline std::string* TradeEvent::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:tbot.TradeEvent.source)
  return _s;
}
inline const std::string& TradeEvent::_internal_source() const {
  return _impl_.source_.Get();
}
inline void TradeEvent::_internal_set_source(const std::string& value) {
  
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* TradeEvent::_internal_mutable_source() {
  
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* TradeEvent::release_source() {
  // @@protoc_insertion_point(field_release:tbot.TradeEvent.source)
  return _impl_.source_.Release();
}
inline void TradeEvent::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.TradeEvent.source)
}

// string symbol = 9;
inline void TradeEvent::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& TradeEvent::symbol() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeEvent::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.symbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.symbol)
}
inline std::string* TradeEvent::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:tbot.TradeEvent.symbol)
  return _s;
}
inline const std::string& TradeEvent::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void TradeEvent::_internal_set_symbol(const std::string& value) {
  
  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* TradeEvent::_internal_mutable_symbol() {
  
  return _impl_.symbol_.Mutable(GetArenaForAllocation());
}
inline std::string* TradeEvent::release_symbol() {
  // @@protoc_insertion_point(field_release:tbot.TradeEvent.symbol)
  return _impl_.symbol_.Release();
}
inline void TradeEvent::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  _impl_.symbol_.SetAllocated(symbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.TradeEvent.symbol)
}

// int32 order_type = 10;
inline void TradeEvent::clear_order_type() {
  _impl_.order_type_ = 0;
}
inline int32_t TradeEvent::_internal_order_type() const {
  return _impl_.order_type_;
}
inline int32_t TradeEvent::order_type() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.order_type)
  return _internal_order_type();
}
inline void TradeEvent::_internal_set_order_type(int32_t value) {
  
  _impl_.order_type_ = value;
}
inline void TradeEvent::set_order_type(int32_t value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.order_type)
}

// double lots = 11;
inline void TradeEvent::clear_lots() {
  _impl_.lots_ = 0;
}
inline double TradeEvent::_internal_lots() const {
  return _impl_.lots_;
}
inline double TradeEvent::lots() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.lots)
  return _internal_lots();
}
inline void TradeEvent::_internal_set_lots(double value) {
  
  _impl_.lots_ = value;
}
inline void TradeEvent::set_lots(double value) {
  _internal_set_lots(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.lots)
}

// double price = 12;
inline void TradeEvent::clear_price() {
  _impl_.price_ = 0;
}
inline double TradeEvent::_internal_price() const {
  return _impl_.price_;
}
inline double TradeEvent::price() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.price)
  return _internal_price();
}
inline void TradeEvent::_internal_set_price(double value) {
  
  _impl_.price_ = value;
}
inline void TradeEvent::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.price)
}

// double sl = 13;
inline void TradeEvent::clear_sl() {
  _impl_.sl_ = 0;
}
inline double TradeEvent::_internal_sl() const {
  return _impl_.sl_;
}
inline double TradeEvent::sl() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.sl)
  return _internal_sl();
}
inline void TradeEvent::_internal_set_sl(double value) {
  
  _impl_.sl_ = value;
}
inline void TradeEvent::set_sl(double value) {
  _internal_set_sl(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.sl)
}

// double tp = 14;
inline void TradeEvent::clear_tp() {
  _impl_.tp_ = 0;
}
inline double TradeEvent::_internal_tp() const {
  return _impl_.tp_;
}
inline double TradeEvent::tp() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.tp)
  return _internal_tp();
}
inline void TradeEvent::_internal_set_tp(double value) {
  
  _impl_.tp_ = value;
}
inline void TradeEvent::set_tp(double value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.tp)
}

// double profit = 15;
inline void TradeEvent::clear_profit() {
  _impl_.profit_ = 0;
}
inline double TradeEvent::_internal_profit() const {
  return _impl_.profit_;
}
inline double TradeEvent::profit() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.profit)
  return _internal_profit();
}
inline void TradeEvent::_internal_set_profit(double value) {
  
  _impl_.profit_ = value;
}
inline void TradeEvent::set_profit(double value) {
  _internal_set_profit(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.profit)
}

// double profit_after_trade = 16;
inline void TradeEvent::clear_profit_after_trade() {
  _impl_.profit_after_trade_ = 0;
}
inline double TradeEvent::_internal_profit_after_trade() const {
  return _impl_.profit_after_trade_;
}
inline double TradeEvent::profit_after_trade() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.profit_after_trade)
  return _internal_profit_after_trade();
}
inline void TradeEvent::_internal_set_profit_after_trade(double value) {
  
  _impl_.profit_after_trade_ = value;
}
inline void TradeEvent::set_profit_after_trade(double value) {
  _internal_set_profit_after_trade(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.profit_after_trade)
}

// double spread = 17;
inline void TradeEvent::clear_spread() {
  _impl_.spread_ = 0;
}
inline double TradeEvent::_internal_spread() const {
  return _impl_.spread_;
}
inline double TradeEvent::spread() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.spread)
  return _internal_spread();
}
inline void TradeEvent::_internal_set_spread(double value) {
  
  _impl_.spread_ = value;
}
inline void TradeEvent::set_spread(double value) {
  _internal_set_spread(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.spread)
}

// string comment = 18;
inline void TradeEvent::clear_comment() {
  _impl_.comment_.ClearToEmpty();
}
inline const std::string& TradeEvent::comment() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeEvent::set_comment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.comment)
}
inline std::string* TradeEvent::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:tbot.TradeEvent.comment)
  return _s;
}
inline const std::string& TradeEvent::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void TradeEvent::_internal_set_comment(const std::string& value) {
  
  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* TradeEvent::_internal_mutable_comment() {
  
  return _impl_.comment_.Mutable(GetArenaForAllocation());
}
inline std::string* TradeEvent::release_comment() {
  // @@protoc_insertion_point(field_release:tbot.TradeEvent.comment)
  return _impl_.comment_.Release();
}
inline void TradeEvent::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  _impl_.comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.TradeEvent.comment)
}

// double remaining_lots = 19;
inline void TradeEvent::clear_remaining_lots() {
  _impl_.remaining_lots_ = 0;
}
inline double TradeEvent::_internal_remaining_lots() const {
  return _impl_.remaining_lots_;
}
inline double TradeEvent::remaining_lots() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.remaining_lots)
  return _internal_remaining_lots();
}
inline void TradeEvent::_internal_set_remaining_lots(double value) {
  
  _impl_.remaining_lots_ = value;
}
inline void TradeEvent::set_remaining_lots(double value) {
  _internal_set_remaining_lots(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.remaining_lots)
}

// double slippage = 20;
inline void TradeEvent::clear_slippage() {
  _impl_.slippage_ = 0;
}
inline double TradeEvent::_internal_slippage() const {
  return _impl_.slippage_;
}
inline double TradeEvent::slippage() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.slippage)
  return _internal_slippage();
}
inline void TradeEvent::_internal_set_slippage(double value) {
  
  _impl_.slippage_ = value;
}
inline void TradeEvent::set_slippage(double value) {
  _internal_set_slippage(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.slippage)
}

// int32 volume = 21;
inline void TradeEvent::clear_volume() {
  _impl_.volume_ = 0;
}
inline int32_t TradeEvent::_internal_volume() const {
  return _impl_.volume_;
}
inline int32_t TradeEvent::volume() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.volume)
  return _internal_volume();
}
inline void TradeEvent::_internal_set_volume(int32_t value) {
  
  _impl_.volume_ = value;
}
inline void TradeEvent::set_volume(int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.volume)
}

// string open_time = 22;
inline void TradeEvent::clear_open_time() {
  _impl_.open_time_.ClearToEmpty();
}
inline const std::string& TradeEvent::open_time() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.open_time)
  return _internal_open_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeEvent::set_open_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.open_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.open_time)
}
inline std::string* TradeEvent::mutable_open_time() {
  std::string* _s = _internal_mutable_open_time();
  // @@protoc_insertion_point(field_mutable:tbot.TradeEvent.open_time)
  return _s;
}
inline const std::string& TradeEvent::_internal_open_time() const {
  return _impl_.open_time_.Get();
}
inline void TradeEvent::_internal_set_open_time(const std::string& value) {
  
  _impl_.open_time_.Set(value, GetArenaForAllocation());
}
inline std::string* TradeEvent::_internal_mutable_open_time() {
  
  return _impl_.open_time_.Mutable(GetArenaForAllocation());
}
inline std::string* TradeEvent::release_open_time() {
  // @@protoc_insertion_point(field_release:tbot.TradeEvent.open_time)
  return _impl_.open_time_.Release();
}
inline void TradeEvent::set_allocated_open_time(std::string* open_time) {
  if (open_time != nullptr) {
    
  } else {
    
  }
  _impl_.open_time_.SetAllocated(open_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.open_time_.IsDefault()) {
    _impl_.open_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.TradeEvent.open_time)
}

// double book_bid_vol = 23;
inline void TradeEvent::clear_book_bid_vol() {
  _impl_.book_bid_vol_ = 0;
}
inline double TradeEvent::_internal_book_bid_vol() const {
  return _impl_.book_bid_vol_;
}
inline double TradeEvent::book_bid_vol() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.book_bid_vol)
  return _internal_book_bid_vol();
}
inline void TradeEvent::_internal_set_book_bid_vol(double value) {
  
  _impl_.book_bid_vol_ = value;
}
inline void TradeEvent::set_book_bid_vol(double value) {
  _internal_set_book_bid_vol(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.book_bid_vol)
}

// double book_ask_vol = 24;
inline void TradeEvent::clear_book_ask_vol() {
  _impl_.book_ask_vol_ = 0;
}
inline double TradeEvent::_internal_book_ask_vol() const {
  return _impl_.book_ask_vol_;
}
inline double TradeEvent::book_ask_vol() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.book_ask_vol)
  return _internal_book_ask_vol();
}
inline void TradeEvent::_internal_set_book_ask_vol(double value) {
  
  _impl_.book_ask_vol_ = value;
}
inline void TradeEvent::set_book_ask_vol(double value) {
  _internal_set_book_ask_vol(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.book_ask_vol)
}

// double book_imbalance = 25;
inline void TradeEvent::clear_book_imbalance() {
  _impl_.book_imbalance_ = 0;
}
inline double TradeEvent::_internal_book_imbalance() const {
  return _impl_.book_imbalance_;
}
inline double TradeEvent::book_imbalance() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.book_imbalance)
  return _internal_book_imbalance();
}
inline void TradeEvent::_internal_set_book_imbalance(double value) {
  
  _impl_.book_imbalance_ = value;
}
inline void TradeEvent::set_book_imbalance(double value) {
  _internal_set_book_imbalance(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.book_imbalance)
}

// double sl_hit_dist = 26;
inline void TradeEvent::clear_sl_hit_dist() {
  _impl_.sl_hit_dist_ = 0;
}
inline double TradeEvent::_internal_sl_hit_dist() const {
  return _impl_.sl_hit_dist_;
}
inline double TradeEvent::sl_hit_dist() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.sl_hit_dist)
  return _internal_sl_hit_dist();
}
inline void TradeEvent::_internal_set_sl_hit_dist(double value) {
  
  _impl_.sl_hit_dist_ = value;
}
inline void TradeEvent::set_sl_hit_dist(double value) {
  _internal_set_sl_hit_dist(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.sl_hit_dist)
}

// double tp_hit_dist = 27;
inline void TradeEvent::clear_tp_hit_dist() {
  _impl_.tp_hit_dist_ = 0;
}
inline double TradeEvent::_internal_tp_hit_dist() const {
  return _impl_.tp_hit_dist_;
}
inline double TradeEvent::tp_hit_dist() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.tp_hit_dist)
  return _internal_tp_hit_dist();
}
inline void TradeEvent::_internal_set_tp_hit_dist(double value) {
  
  _impl_.tp_hit_dist_ = value;
}
inline void TradeEvent::set_tp_hit_dist(double value) {
  _internal_set_tp_hit_dist(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.tp_hit_dist)
}

// int32 decision_id = 28;
inline void TradeEvent::clear_decision_id() {
  _impl_.decision_id_ = 0;
}
inline int32_t TradeEvent::_internal_decision_id() const {
  return _impl_.decision_id_;
}
inline int32_t TradeEvent::decision_id() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.decision_id)
  return _internal_decision_id();
}
inline void TradeEvent::_internal_set_decision_id(int32_t value) {
  
  _impl_.decision_id_ = value;
}
inline void TradeEvent::set_decision_id(int32_t value) {
  _internal_set_decision_id(value);
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.decision_id)
}

// string trace_id = 29;
inline void TradeEvent::clear_trace_id() {
  _impl_.trace_id_.ClearToEmpty();
}
inline const std::string& TradeEvent::trace_id() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.trace_id)
  return _internal_trace_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeEvent::set_trace_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trace_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.trace_id)
}
inline std::string* TradeEvent::mutable_trace_id() {
  std::string* _s = _internal_mutable_trace_id();
  // @@protoc_insertion_point(field_mutable:tbot.TradeEvent.trace_id)
  return _s;
}
inline const std::string& TradeEvent::_internal_trace_id() const {
  return _impl_.trace_id_.Get();
}
inline void TradeEvent::_internal_set_trace_id(const std::string& value) {
  
  _impl_.trace_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TradeEvent::_internal_mutable_trace_id() {
  
  return _impl_.trace_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TradeEvent::release_trace_id() {
  // @@protoc_insertion_point(field_release:tbot.TradeEvent.trace_id)
  return _impl_.trace_id_.Release();
}
inline void TradeEvent::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  _impl_.trace_id_.SetAllocated(trace_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trace_id_.IsDefault()) {
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.TradeEvent.trace_id)
}

// string span_id = 30;
inline void TradeEvent::clear_span_id() {
  _impl_.span_id_.ClearToEmpty();
}
inline const std::string& TradeEvent::span_id() const {
  // @@protoc_insertion_point(field_get:tbot.TradeEvent.span_id)
  return _internal_span_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeEvent::set_span_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.span_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tbot.TradeEvent.span_id)
}
inline std::string* TradeEvent::mutable_span_id() {
  std::string* _s = _internal_mutable_span_id();
  // @@protoc_insertion_point(field_mutable:tbot.TradeEvent.span_id)
  return _s;
}
inline const std::string& TradeEvent::_internal_span_id() const {
  return _impl_.span_id_.Get();
}
inline void TradeEvent::_internal_set_span_id(const std::string& value) {
  
  _impl_.span_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TradeEvent::_internal_mutable_span_id() {
  
  return _impl_.span_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TradeEvent::release_span_id() {
  // @@protoc_insertion_point(field_release:tbot.TradeEvent.span_id)
  return _impl_.span_id_.Release();
}
inline void TradeEvent::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  _impl_.span_id_.SetAllocated(span_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.span_id_.IsDefault()) {
    _impl_.span_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tbot.TradeEvent.span_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tbot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trade_5fevent_2eproto
