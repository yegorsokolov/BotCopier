// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: observer.proto

#include "observer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tbot {
PROTOBUF_CONSTEXPR ObserverMessage::ObserverMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ObserverMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObserverMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObserverMessageDefaultTypeInternal() {}
  union {
    ObserverMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObserverMessageDefaultTypeInternal _ObserverMessage_default_instance_;
}  // namespace tbot
static ::_pb::Metadata file_level_metadata_observer_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_observer_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_observer_2eproto = nullptr;

const uint32_t TableStruct_observer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbot::ObserverMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tbot::ObserverMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tbot::ObserverMessage, _impl_.schema_version_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tbot::ObserverMessage, _impl_.payload_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tbot::ObserverMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tbot::_ObserverMessage_default_instance_._instance,
};

const char descriptor_table_protodef_observer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016observer.proto\022\004tbot\032\021trade_event.prot"
  "o\032\022metric_event.proto\"|\n\017ObserverMessage"
  "\022\026\n\016schema_version\030\001 \001(\t\022!\n\005event\030\002 \001(\0132"
  "\020.tbot.TradeEventH\000\022#\n\006metric\030\003 \001(\0132\021.tb"
  "ot.MetricEventH\000B\t\n\007payloadb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_observer_2eproto_deps[2] = {
  &::descriptor_table_metric_5fevent_2eproto,
  &::descriptor_table_trade_5fevent_2eproto,
};
static ::_pbi::once_flag descriptor_table_observer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_observer_2eproto = {
    false, false, 195, descriptor_table_protodef_observer_2eproto,
    "observer.proto",
    &descriptor_table_observer_2eproto_once, descriptor_table_observer_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_observer_2eproto::offsets,
    file_level_metadata_observer_2eproto, file_level_enum_descriptors_observer_2eproto,
    file_level_service_descriptors_observer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_observer_2eproto_getter() {
  return &descriptor_table_observer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_observer_2eproto(&descriptor_table_observer_2eproto);
namespace tbot {

// ===================================================================

class ObserverMessage::_Internal {
 public:
  static const ::tbot::TradeEvent& event(const ObserverMessage* msg);
  static const ::tbot::MetricEvent& metric(const ObserverMessage* msg);
};

const ::tbot::TradeEvent&
ObserverMessage::_Internal::event(const ObserverMessage* msg) {
  return *msg->_impl_.payload_.event_;
}
const ::tbot::MetricEvent&
ObserverMessage::_Internal::metric(const ObserverMessage* msg) {
  return *msg->_impl_.payload_.metric_;
}
void ObserverMessage::set_allocated_event(::tbot::TradeEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event));
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    _impl_.payload_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:tbot.ObserverMessage.event)
}
void ObserverMessage::clear_event() {
  if (_internal_has_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.event_;
    }
    clear_has_payload();
  }
}
void ObserverMessage::set_allocated_metric(::tbot::MetricEvent* metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metric));
    if (message_arena != submessage_arena) {
      metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    set_has_metric();
    _impl_.payload_.metric_ = metric;
  }
  // @@protoc_insertion_point(field_set_allocated:tbot.ObserverMessage.metric)
}
void ObserverMessage::clear_metric() {
  if (_internal_has_metric()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.metric_;
    }
    clear_has_payload();
  }
}
ObserverMessage::ObserverMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tbot.ObserverMessage)
}
ObserverMessage::ObserverMessage(const ObserverMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObserverMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_version_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_version().empty()) {
    _this->_impl_.schema_version_.Set(from._internal_schema_version(), 
      _this->GetArenaForAllocation());
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kEvent: {
      _this->_internal_mutable_event()->::tbot::TradeEvent::MergeFrom(
          from._internal_event());
      break;
    }
    case kMetric: {
      _this->_internal_mutable_metric()->::tbot::MetricEvent::MergeFrom(
          from._internal_metric());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tbot.ObserverMessage)
}

inline void ObserverMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_version_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.schema_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_payload();
}

ObserverMessage::~ObserverMessage() {
  // @@protoc_insertion_point(destructor:tbot.ObserverMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObserverMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schema_version_.Destroy();
  if (has_payload()) {
    clear_payload();
  }
}

void ObserverMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObserverMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:tbot.ObserverMessage)
  switch (payload_case()) {
    case kEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.event_;
      }
      break;
    }
    case kMetric: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.metric_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ObserverMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tbot.ObserverMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schema_version_.ClearToEmpty();
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserverMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string schema_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_schema_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tbot.ObserverMessage.schema_version"));
        } else
          goto handle_unusual;
        continue;
      // .tbot.TradeEvent event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tbot.MetricEvent metric = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObserverMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbot.ObserverMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string schema_version = 1;
  if (!this->_internal_schema_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_version().data(), static_cast<int>(this->_internal_schema_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tbot.ObserverMessage.schema_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_schema_version(), target);
  }

  // .tbot.TradeEvent event = 2;
  if (_internal_has_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // .tbot.MetricEvent metric = 3;
  if (_internal_has_metric()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::metric(this),
        _Internal::metric(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbot.ObserverMessage)
  return target;
}

size_t ObserverMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbot.ObserverMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string schema_version = 1;
  if (!this->_internal_schema_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_version());
  }

  switch (payload_case()) {
    // .tbot.TradeEvent event = 2;
    case kEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.event_);
      break;
    }
    // .tbot.MetricEvent metric = 3;
    case kMetric: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.metric_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObserverMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObserverMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObserverMessage::GetClassData() const { return &_class_data_; }


void ObserverMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObserverMessage*>(&to_msg);
  auto& from = static_cast<const ObserverMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tbot.ObserverMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_schema_version().empty()) {
    _this->_internal_set_schema_version(from._internal_schema_version());
  }
  switch (from.payload_case()) {
    case kEvent: {
      _this->_internal_mutable_event()->::tbot::TradeEvent::MergeFrom(
          from._internal_event());
      break;
    }
    case kMetric: {
      _this->_internal_mutable_metric()->::tbot::MetricEvent::MergeFrom(
          from._internal_metric());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObserverMessage::CopyFrom(const ObserverMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbot.ObserverMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserverMessage::IsInitialized() const {
  return true;
}

void ObserverMessage::InternalSwap(ObserverMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_version_, lhs_arena,
      &other->_impl_.schema_version_, rhs_arena
  );
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserverMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_observer_2eproto_getter, &descriptor_table_observer_2eproto_once,
      file_level_metadata_observer_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tbot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tbot::ObserverMessage*
Arena::CreateMaybeMessage< ::tbot::ObserverMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbot::ObserverMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
